// Generated by gencpp from file moveit_tutorials/ValidJointsGoal.msg
// DO NOT EDIT!


#ifndef MOVEIT_TUTORIALS_MESSAGE_VALIDJOINTSGOAL_H
#define MOVEIT_TUTORIALS_MESSAGE_VALIDJOINTSGOAL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace moveit_tutorials
{
template <class ContainerAllocator>
struct ValidJointsGoal_
{
  typedef ValidJointsGoal_<ContainerAllocator> Type;

  ValidJointsGoal_()
    : valid_joint_values()  {
    }
  ValidJointsGoal_(const ContainerAllocator& _alloc)
    : valid_joint_values(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _valid_joint_values_type;
  _valid_joint_values_type valid_joint_values;





  typedef boost::shared_ptr< ::moveit_tutorials::ValidJointsGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::moveit_tutorials::ValidJointsGoal_<ContainerAllocator> const> ConstPtr;

}; // struct ValidJointsGoal_

typedef ::moveit_tutorials::ValidJointsGoal_<std::allocator<void> > ValidJointsGoal;

typedef boost::shared_ptr< ::moveit_tutorials::ValidJointsGoal > ValidJointsGoalPtr;
typedef boost::shared_ptr< ::moveit_tutorials::ValidJointsGoal const> ValidJointsGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::moveit_tutorials::ValidJointsGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::moveit_tutorials::ValidJointsGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::moveit_tutorials::ValidJointsGoal_<ContainerAllocator1> & lhs, const ::moveit_tutorials::ValidJointsGoal_<ContainerAllocator2> & rhs)
{
  return lhs.valid_joint_values == rhs.valid_joint_values;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::moveit_tutorials::ValidJointsGoal_<ContainerAllocator1> & lhs, const ::moveit_tutorials::ValidJointsGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace moveit_tutorials

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::moveit_tutorials::ValidJointsGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::moveit_tutorials::ValidJointsGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::moveit_tutorials::ValidJointsGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::moveit_tutorials::ValidJointsGoal_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::moveit_tutorials::ValidJointsGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::moveit_tutorials::ValidJointsGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::moveit_tutorials::ValidJointsGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "726551018de18a5486e36fb7fd3f6c81";
  }

  static const char* value(const ::moveit_tutorials::ValidJointsGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x726551018de18a54ULL;
  static const uint64_t static_value2 = 0x86e36fb7fd3f6c81ULL;
};

template<class ContainerAllocator>
struct DataType< ::moveit_tutorials::ValidJointsGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "moveit_tutorials/ValidJointsGoal";
  }

  static const char* value(const ::moveit_tutorials::ValidJointsGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::moveit_tutorials::ValidJointsGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"float64[] valid_joint_values\n"
;
  }

  static const char* value(const ::moveit_tutorials::ValidJointsGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::moveit_tutorials::ValidJointsGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.valid_joint_values);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ValidJointsGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::moveit_tutorials::ValidJointsGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::moveit_tutorials::ValidJointsGoal_<ContainerAllocator>& v)
  {
    s << indent << "valid_joint_values[]" << std::endl;
    for (size_t i = 0; i < v.valid_joint_values.size(); ++i)
    {
      s << indent << "  valid_joint_values[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.valid_joint_values[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOVEIT_TUTORIALS_MESSAGE_VALIDJOINTSGOAL_H
